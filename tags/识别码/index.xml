<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>识别码 on Sera Wang</title><link>https://selfsolo.com/tags/%E8%AF%86%E5%88%AB%E7%A0%81/</link><description>Recent content in 识别码 on Sera Wang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Nov 2017 21:14:23 +0800</lastBuildDate><atom:link href="https://selfsolo.com/tags/%E8%AF%86%E5%88%AB%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>用Python识别验证码</title><link>https://selfsolo.com/p/%E7%94%A8python%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81/</link><pubDate>Thu, 30 Nov 2017 21:14:23 +0800</pubDate><guid>https://selfsolo.com/p/%E7%94%A8python%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81/</guid><description>前言 先科普一下几个概念：
什么是验证码? 为什么要破解它?
验证码现在很常见，很多网站的用户登录界面都要求输入正确的验证码，它可以通过脚本生成。
我们写爬虫或者做某些不可描述的事情的时候往往需要登录，有时候验证码很难绕过，但我们又需要让爬虫或者工具能够顺利登录目标网站，所以就需要破解验证码。
python有个库叫PIL。
全称”Python Imaging Library”，如你所见，就是python的一个图片处理库。功能非常强大，使用非常方便，所以使用它。
灰度值
因为验证码通常是一个图片，所以就必须说明一下这个灰度值的概念。
baike: 把白色与黑色之间按对数关系分成若干级,称为“灰度等级”。范围一般从0到255,白色为255,黑色为0,故黑白图片也称灰度图像,在医学、图像识别领域有很广泛的用途。
操作 对于目标验证码，采取以下操作：
1. 下载验证码图片 2. 对验证码图片进行降噪并切割 3. 根据相似度识别验证码 关门了，先挖好坑，我顺便再研究一波代码；
…好的我回来了
一晚上的结果，基本对比图库弄出来了
…所以问题你们也发现了吧…400张4位验证码导出来的结果，“0”，“1”，“I”和“L”没有一个命中或者说能被肉眼看出来的…
有了基本图库，接下来就是通过PIL库的帮助来写 对比像素的”相似度”脚本了。
思路暂时是这样：
同时遍历两个目标的图片，像素相同则相似度+1，最后相似度除以像素总数，则得到最后的相似度结果。
马上要断电了。
12/1
… 降噪脚本完成 找不到优化的地方
… 切割脚本简易版完成 找到可以优化的地方了
… 识别脚本正在写。
正确率惨不忍睹 D8DH -&amp;gt; U8UH 3JZU -&amp;gt; JJJU XG5X -&amp;gt; XCJX 95KU -&amp;gt; JJKU
卧槽不测了，心态炸裂了谢谢。
改了下代码，好多了。
结果如下图：
虽然准确率到了86%, 但与之而来了一个问题…现在验证码越来越高端，这方法对中文根本不适用，然后还有那么多倾斜的验证码，比如：</description></item></channel></rss>