<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>浏览器 on Sera Wang</title><link>https://sera.wang/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/</link><description>Recent content in 浏览器 on Sera Wang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Aug 2018 21:14:23 +0800</lastBuildDate><atom:link href="https://sera.wang/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>浅析浏览器的编码与解码</title><link>https://sera.wang/p/%E6%B5%85%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link><pubDate>Mon, 13 Aug 2018 21:14:23 +0800</pubDate><guid>https://sera.wang/p/%E6%B5%85%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid><description>一直以来对url编码，html编码，js编码都存在着困惑，比如
url/html/js是如何编码的? 浏览器又是什么时候按什么顺序进行url/html/js解码? 读完了the tangled web，翻了些博客，又各种google，我想暂时可以解除一点心中的疑惑了。
整体简述 在开始之前，我想先简单说一下整体的一个过程:
在浏览器的地址栏中输入url，发送http请求头(涉及tcp/ip/dns)
http://example.com/test.php
远程的web服务器(apache/iis等)接收到url，分析请求头，根据它找到对应资源，返回一个响应头和数据
浏览器接收到响应的数据后，开始了接下来要讲的解析…
如何编码 在开始解析前，我们先看看这些东西是如何编码的
url编码:
标准的url结构是:
scheme://login:password@address:port/path?quesry_string#fragment
以之前那串url为栗
http://example.com/test.php?uid=27&amp;content=on#main
这是一串普通的url，即我们平常所见的格式大多和这个类似，也就是说，像开头的 “ http: “，协议后面跟一个冒号，还有之后的两个正斜杠” // “, 后面再跟域名，再跟地址，再跟参数字符串，再跟片段id…
可以看到，一些符号非常”常规”，比如冒号，正斜杠，问号…这些都是浏览器/服务器用来解析url用于语义分隔的保留字符，如果出现在url里就会破坏语法，影响正常解析，导致的各种有趣的后果以后有机会再讲。
于是就有了url编码，因为有些保留字符可能确实有必要需要在url里出现，它以一个百分号%和该字符的ASCII对应的2位十六进制数去替换这些字符
比如，等于号=的url编码为 %3D
html编码
我们拿常见的标签举例，
跟url的问题类似，为了避免在标签内容中出现以及应对某些攻击，某些保留字符出现在文本节点和标签值里是不安全的，比如说多重标签，xss…
于是就有了html编码，一般以 &amp;amp; 开头，以分号 ; 结尾，
左尖括号 &amp;lt; 写作 &amp;lt;
右尖括号 &amp;gt; 写作 &amp;gt;</description></item></channel></rss>