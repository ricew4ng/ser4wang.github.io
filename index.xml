<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>赛博自留地</title><link>https://selfsolo.com/</link><description>Recent content on 赛博自留地</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 May 2020 11:04:06 +0000</lastBuildDate><atom:link href="https://selfsolo.com/index.xml" rel="self" type="application/rss+xml"/><item><title>机器学习 - 入门</title><link>https://selfsolo.com/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 30 May 2020 11:04:06 +0000</pubDate><guid>https://selfsolo.com/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8/</guid><description>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20210801163900.png" alt="Featured image of post 机器学习 - 入门" />&lt;h1 id="相关资料">相关资料&lt;/h1>
&lt;h2 id="课程">课程&lt;/h2>
&lt;p>Machine Learning - Andrew Ng &lt;a class="link" href="https://www.coursera.org/learn/machine-learning/home/welcome" target="_blank" rel="noopener"
>课程地址&lt;/a>&lt;/p>
&lt;h2 id="书籍">书籍&lt;/h2>
&lt;p>《Python机器学习》— Sebastian Raschka&lt;/p>
&lt;h2 id="师兄当年安利">师兄当年安利&lt;/h2>
&lt;p>《数学之美》— 吴军&lt;/p>
&lt;p>一些振奋人心的话和介绍&lt;/p>
&lt;blockquote>
&lt;p>无需多言，大家都已知道，机器学习已发展成为当前最能激发人们兴趣的技术之一。出于各种考虑，Google、Facebook、Apple、Amazon、IBM等众多公司都投入了巨资用于机器学习理论和应用的研究。机器学习看起来已经成为当前的一个流行语，但这绝对不是炒作。这一令人兴奋的技术为我们带来了全新的可能，并已成为我们日常生活中不可或缺的一部分。例如，与智能手机的语音助手对话、向客户推荐合适的商品、防止信用卡诈骗、过滤垃圾邮件，以及检测与诊断疾病等，这样的例子不胜枚举。—— Sebastian Raschka&lt;/p>
&lt;/blockquote>
&lt;h1 id="python机器学习">Python机器学习&lt;/h1>
&lt;h2 id="第一章-机器学习">第一章 机器学习&lt;/h2>
&lt;h3 id="机器学习的概念">机器学习的概念&lt;/h3>
&lt;p>当前的时代拥有大量的结构化和非结构化的数据，20世纪下半叶，机器学习逐渐演化为人工智能的一个分支，其目的是通过对&lt;strong>自学习算法&lt;/strong>的开发，从数据中获取知识，进而对&lt;strong>未来&lt;/strong>进行预测。与传统的通过大量数据分析然后人工推导规则（如WAF规则）并构造模型不同，机器学习提供了一种&lt;strong>从数据中获取知识的方法，同时能够逐步提高预测模型的性能，并将模型应用于基于数据驱动的决策中去&lt;/strong>。&lt;/p>
&lt;h3 id="机器学习的三种方法">机器学习的三种方法&lt;/h3>
&lt;h4 id="监督学习---supervised-learning">监督学习 - Supervised Learning&lt;/h4>
&lt;h5 id="简介">简介&lt;/h5>
&lt;p>监督学习的目的是使用有类标的&lt;strong>训练数据&lt;/strong>构建模型，我们可以使用经训练得到的&lt;strong>模型&lt;/strong>对未来数据进行&lt;strong>预测&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>监督&lt;/strong>是指训练数据集中的每个样本均有一个已知的输出项。&lt;/p>
&lt;blockquote>
&lt;p>示例：过滤垃圾邮件&lt;/p>
&lt;/blockquote>
&lt;p>基于&lt;strong>有类标&lt;/strong>的电子邮件样本库（每一个样本都已被准确地标记是否为垃圾邮件），可以使用监督学习算法训练生成一个判定模型，用来&lt;strong>判定一封新的电子邮件是否为垃圾邮件&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200530120406.png" alt="监督学习示例" />&lt;/p>
&lt;p>类似过滤垃圾邮件的这类问题也被称为&lt;strong>分类&lt;/strong>（classfication），监督学习的另一个子类是&lt;strong>回归&lt;/strong>（regression）。&lt;/p>
&lt;h5 id="利用分类对类标进行预测">利用分类对类标进行预测&lt;/h5>
&lt;p>&lt;strong>分类&lt;/strong>是基于对过往类标已知示例的观察与学习，实现对新样本类标的预测。这些类标是离散的、无序的值，它们可以视为样本的组别信息（group membership）。上文检测垃圾邮件的例子是一个典型的&lt;strong>二类别分类&lt;/strong>（binary classification）任务，机器学习算法会生成一系列的规则用以判定邮件是否属于垃圾邮件。&lt;/p>
&lt;p>然而，&lt;strong>类标集合并非一定是二类别分类的&lt;/strong>。通过监督学习算法构造的预测模型可以将训练样本库中出现的任何类标赋给一个尚未被标记的新样本。&lt;/p>
&lt;p>比如手写字符识别就是一个典型的&lt;strong>多类别分类&lt;/strong>（multi-class classfication）的例子。我们可以将字母表中每个字母的多个不同的手写样本收集起来作为训练数据集。此时，若用户给出一个新的手写字符，我们的预测模型能够以一定的准确率将其判定为字母表中的某个字母。然而，如果我们的训练样本库中没有出现0～9的数字字符，那么模型将无法正确辨别任何输入的数字。&lt;/p>
&lt;p>下图通过一个具有30个训练样本的示例说明二类别分类任务的概念：15个样本被标记为负类别（negative class - 圆圈）；15个被标记为正类别（positive class - 加号）。此时，我们的数据集是二维的，这意味着每个样本都有两个与其关联的值：x1和x2。现在，我们可以通过监督学习算法获得一条规则，并将其表示为一条黑色虚线标识的分界线。可以根据给定的x1、x2值将新样本划分到某个类别中。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200530124134.png" alt="" />&lt;/p>
&lt;h5 id="使用回归预测连续输出值">使用回归预测连续输出值&lt;/h5>
&lt;p>回归分析（regression analysis）的目的是针对连续型输出变量进行预测。在回归分析中，数据会给出大量的自变量（解释变量）和因变量（输出结果），通过尝试寻找这两种变量之间的关系，就能够预测输出变量。&lt;/p>
&lt;p>例如，如果我们想预测学生的数学考试成绩，如果花费在学习上的时间和最终的考试成绩有关联，则可以将其作为训练数据来训练模型，以根据学习时间预测将来要参加考试的学生的成绩。&lt;/p>
&lt;p>下图用图例阐述了&lt;strong>线性回归&lt;/strong>（linear regression）的概念：给定一个自变量x和因变量y，拟合一条直线使得样例数据点与拟合直线之间的距离最短，最常用的就是采用平均平方距离来计算。这样，我们就可以通过对样本数据的训练来获得拟合直线的截距和斜率，从而对新的输入变量值所对应的输出变量值进行预测。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200530141632.png" alt="" />&lt;/p>
&lt;h4 id="强化学习---reinforcement-learning">强化学习 - Reinforcement Learning&lt;/h4>
&lt;p>强化学习的目的是构建一个&lt;strong>系统&lt;/strong>（Agent），在于&lt;strong>环境&lt;/strong>（environment）交互的国策和观念中提高系统的性能。环境的当前状态信息中通常包含一个&lt;strong>反馈&lt;/strong>（reward）信号，我们可以将强化学习视为与监督学习相关的一个领域。然而，在强化学习中，这个反馈值不是一个确定的类标或连续的值，而是一个通过反馈函数产生的对当前系统行为的评价。通过与环境的交互，Agent可以通过强化学习来得到一系列行为，通过探索性的试错或者借助精心设计的激励系统使得正向反馈最大化。&lt;/p>
&lt;p>一个最常见的例子就是围棋对弈的游戏（还有Dota的Open AI）。在此，Agent根据棋盘上的当前局势（environment）决定落子的位置，而游戏结束时胜负的判定可以作为激励信号。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200530142503.png" alt="" />&lt;/p>
&lt;h4 id="无监督学习---unsupervised-learning">无监督学习 - Unsupervised Learning&lt;/h4>
&lt;p>无监督学习的目的是在没有已知输出变量和反馈函数指导的情况下提取有效信息来探索数据的整体结构。&lt;/p>
&lt;h5 id="通过聚类发现数据的子群">通过聚类发现数据的子群&lt;/h5>
&lt;p>&lt;strong>聚类&lt;/strong>是一种探索性数据分析技术。在没有任何相关先验信息的情况下，它可以帮助我们将数据划分为有意义的小的组别（簇，cluster）。对数据进行分析时，生成的每个簇中其内部成员之间具有一定的相似度，而与其它簇中的成员则具有较大的不同，这也是为什么聚类有时被称为&lt;strong>无监督分类&lt;/strong>。&lt;/p>
&lt;h5 id="数据压缩中的降维">数据压缩中的降维&lt;/h5>
&lt;p>&lt;strong>数据降维&lt;/strong>（dimensionality reduction）是无监督学习的另一个子域。通常，我们面对的数据都是高维的（每一次采样都会获取大量的样本值），这就对有限的数据存储空间以及机器学习算法性能提出了挑战。无监督降维是数据特征预处理时常用的技术，用于清除数据中的噪声，它能够在最大程度保留相关信息的情况下将数据压缩到一个维度较小的子空间，但同时也可能会降低某些算法在准确性方面的性能。&lt;/p>
&lt;h3 id="小结">小结&lt;/h3>
&lt;p>构建机器学习系统的路线：&lt;/p>
&lt;ol>
&lt;li>数据预处理&lt;/li>
&lt;li>选择预测模型并进行训练&lt;/li>
&lt;li>模型验证与使用未知数据进行预测&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="第二章-机器学习分类算法">第二章 机器学习分类算法&lt;/h2>
&lt;p>本章将介绍最早以算法方式描述的分类机器学习算法：&lt;strong>感知器&lt;/strong>（perceptron）和&lt;strong>自适应线性神经元&lt;/strong>（adaptive linear neuron）。并实现一个感知器。通过训练使其具备对数据集中数据进行分类的能力。&lt;/p>
&lt;h3 id="罗森布拉特感知器">罗森布拉特感知器&lt;/h3>
&lt;p>&lt;strong>罗森布拉特感知器&lt;/strong>是由罗森布拉特（Frank Rossenblatt）基于1943年沃伦·麦卡洛可（Warren McCullock）和沃尔特·皮茨（Walter Pitts）提出的麦卡洛可-皮茨神经元（MCP）提出的感知器学习法则。&lt;/p>
&lt;blockquote>
&lt;p>麦卡洛可和皮茨将神经细胞描述为一个具备二进制输出的逻辑门。树突接受多个输入信号，如果累加的信号超过某一阈值，经细胞体的整合就会生成一个输出信号，并通过轴突进行传递。&lt;/p>
&lt;/blockquote>
&lt;p>罗森布拉特感知器可以自动通过优化得到权重系数，此系数与输入值的乘积决定了神经元是否被激活。在监督学习与分类中，类似算法可用于预测样本所属的类别。&lt;/p>
&lt;p>可以把这个问题看作一个二值分类的任务，我们把两类分别记为1（正类别）和-1（负类别）。我们定义一个&lt;strong>激励函数&lt;/strong>（activation function）$$\phi (z)$$&lt;/p>
&lt;p>，它以特定的输入值$x$与相应的权值向量$w$的线性组合作为输入，其中，$z$也被称作净输入（$z=w_1x_1+&amp;hellip;+w_mx_m$）:
$$
w=\left[
\begin{matrix}
w_1 \\&lt;br>
. \\&lt;br>
. \\&lt;br>
. \\&lt;br>
w_m
\end{matrix}
\right],
x=\left[
\begin{matrix}
x_1\\&lt;br>
.\\&lt;br>
.\\&lt;br>
.\\&lt;br>
x_m
\end{matrix}
\right]
$$
此时，对于一个特定样本$x(i)$的激励，也就是$\phi(z)$的输出，如果其值大于预设的阈值$\phi$ ，我们将其划分到1类，否则为-1类。在感知器算法中，激励函数是一个简单的分段函数。
$$
\phi(z)=\{ 1,\ \ \ {if}\ \ \ z &amp;gt; 0 \\&lt;br>
\ \{ -1, {其它}
$$
为了简单起见，我们可以把阈值$\phi$移到等式的左边，并增加一个初始项权重记为$w_0=-\phi$且设$x_0=1$，这样我们就可以把$z$写成一个更加紧凑的形式：
$$
z=w_0x_0+w_1x_1+&amp;hellip;+w_mx_m=w^Tx
$$&lt;/p></description></item><item><title>【WIP】开源DNS服务器源码解析</title><link>https://selfsolo.com/p/what_powerdns_do/</link><pubDate>Wed, 18 Sep 2019 20:32:56 +0000</pubDate><guid>https://selfsolo.com/p/what_powerdns_do/</guid><description>&lt;p>我们选择一个开源的DNS服务器，这里笔者选择的是 &lt;a class="link" href="https://github.com/PowerDNS/pdns" target="_blank" rel="noopener"
>PowerDNS&lt;/a>，也是很多组织或企业搭建DNS服务的一个常见选择。&lt;/p>
&lt;h2 id="编译安装">编译安装&lt;/h2>
&lt;p>暂略&lt;/p>
&lt;p>分支：rec-4.0.x&lt;/p>
&lt;h2 id="递归解析-源码">递归解析 源码&lt;/h2>
&lt;p>分析的几点，&lt;/p>
&lt;ol>
&lt;li>
&lt;p>开启Lua与否的区别&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>入口看 pdns_recursor.cc 文件，main() 函数主要读取各种配置以及各种初始化。&lt;/p>
&lt;h3 id="startdoresolve-函数">startDoResolve 函数&lt;/h3>
&lt;h4 id="1-line-690-760">1. Line 690-760&lt;/h4>
&lt;p>![image-20200110211550470](/Users/wangwenqi/Library/Application Support/typora-user-images/image-20200110211550470.png)&lt;/p>
&lt;p>主要初始化一些变量，介绍一部分。&lt;/p>
&lt;p>edns是rfc里用来储存DNS额外信息（客户端IP）。默认不开。&lt;/p>
&lt;p>pw是 DNSPacketWriter，顾名思义，用来写返回包的。&lt;/p>
&lt;p>740 - 746行 设置了一些DNS包的标志位。&lt;/p>
&lt;p>下面初始化了一个SyncRes类（核心），初始化了Lua引擎&lt;/p>
&lt;p>756行 因为DNSSEC的默认值是 process-no-validate，所以默认会进行DNSSEC行为。&lt;/p>
&lt;h4 id="2-line-779-821">2. Line 779-821&lt;/h4>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200110212045.png" alt="" />&lt;/p>
&lt;p>781行 shouldNotValidate变量设置默认值false&lt;/p>
&lt;h4 id="3-line-822-973">3. Line 822-973&lt;/h4>
&lt;p>到了一个if判断。这是关键位置。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200110212817.png" alt="" />&lt;/p>
&lt;p>if的条件是 没开Lua hook 或者 preresolve 这个Lua hook 直接return false，则执行。&lt;/p>
&lt;p>先进行了一次 wantsRPZ (默认true)，根据不同policy进行相应处理。&lt;/p>
&lt;p>下面的try catch会进入一个 beginResolve方法，即进行&lt;strong>递归解析，先不跟进&lt;/strong>。&lt;/p>
&lt;p>874行 判断res，是否等于 -2。代码会switch policy的值进行不同操作。&lt;/p>
&lt;p>918行 如果res == RCode::NoError ，遍历结果，按情况会执行一个 nodata hook.&lt;/p>
&lt;p>935行 又执行了一次wantsRPZ&lt;/p>
&lt;h4 id="4-line-974-1105">4. Line 974-1105&lt;/h4>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20200112164805.png" alt="" />&lt;/p>
&lt;p>975 判断res值是否等于DROP，是则直接return。&lt;/p>
&lt;p>981 如果错误会打Log&lt;/p>
&lt;p>993 判断res值是否等于 -1，是则返回包设置为Servfail&lt;/p>
&lt;p>若res不等于 -1，写返回的rcode（设置为res值）&lt;/p>
&lt;p>1002 若需要validate（执行lua hook后则不需要，这是一个区分点），则会进行使用validateRecords(ret)验证，根据state值执行不同操作。&lt;/p>
&lt;p>1057 结果不为空，会调用 orderAndShuffle(ret)&lt;/p>
&lt;p>DNSComboWriter类似一个生产者，获取请求的 域名 d_qname 和 请求类型 d_qtype，下面是处理EDNS。&lt;/p>
&lt;p>再看下面&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191217204919.png" alt="" />&lt;/p>
&lt;p>738行，初始化了一个DNSPacketWriter，用来写返回的packet。&lt;/p>
&lt;p>750行，初始化了解析器。用来做递归解析的。&lt;/p>
&lt;p>752行， 设置了Lua引擎指针 t_pdl，pdns通过Lua的形式提供了各种hook。&lt;/p>
&lt;p>再往下看，784行初始化了res，即返回码，服务端和客户端都会根据这个判断请求状态。如 Rcode为 SERVFAIL 时，很多开源的dns库就会报错。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218103654.png" alt="" />&lt;/p>
&lt;p>813行，会调用lua的一个hook，prerpz()方法。&lt;/p>
&lt;p>往下看&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218105837.png" alt="" />&lt;/p>
&lt;p>823行，会调用Lua Hook，preresolve方法，在每次递归解析前会执行这个Hook。&lt;/p>
&lt;p>看if条件，如果没有启用 Lua 或者 preresolve 方法返回了false，会进行默认解析。&lt;/p>
&lt;p>825 - 860 行，看默认解析，是 RPZ 和 policy 的判断，这块暂略。不同policy会直接影响解析结果。&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218110645.png" alt="" />&lt;/p>
&lt;p>try的块中，可以看到默认解析会调用 syncres.cc文件中的SyncRes类的beginResolve方法，shouldNotValidate的值是用来判断是否OOB的（OOB暂略）。中间报错会直接返回SERVFAIL。&lt;/p>
&lt;p>暂时不跟进，主要看Lua，往下看&lt;/p>
&lt;p>873行，判断返回码res是否等于-2（-2表示命中了过滤引擎的策略）&lt;/p>
&lt;blockquote>
&lt;p>syncres.cc&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218111229.png" alt="" />&lt;/p>
&lt;p>同之前一样，下面就会根据不同policy进行处理。&lt;/p>
&lt;p>往下看，默认解析最后，如果没有报错的话，会执行Lua Hook，nodata方法&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218111629.png" alt="" />&lt;/p>
&lt;p>第二个if 执行的是 nxdomain hook。（NXDOMAIN 暂略）&lt;/p>
&lt;p>最后再调用 Lua Hook，postresolve方法。（即解析完后执行）&lt;/p>
&lt;p>往下看，如果返回码res 不等于-1，都会执行&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218113239.png" alt="" />&lt;/p>
&lt;p>如果shouldNotValidate为true，即比如postresolve 中返回了false才会执行这段code。&lt;/p>
&lt;p>往下看，&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/20191218113958.png" alt="" />&lt;/p>
&lt;p>会调用validateRecords方法（判断CSPF，暂略）判断解析记录的状态。&lt;/p>
&lt;p>然后根据不同状态设置ad码。&lt;/p>
&lt;p>下面是写到返回的packet中。&lt;/p></description></item><item><title>如何实现一个黑盒扫描器?</title><link>https://selfsolo.com/p/blackbox-scanner/</link><pubDate>Sun, 15 Sep 2019 11:02:51 +0000</pubDate><guid>https://selfsolo.com/p/blackbox-scanner/</guid><description>&lt;h2 id="整体架构">整体架构&lt;/h2>
&lt;p>黑盒扫描的目的主要有两个：&lt;/p>
&lt;ol>
&lt;li>资产发现&lt;/li>
&lt;li>漏洞扫描&lt;/li>
&lt;/ol>
&lt;p>扫描器的效率和表现方面，单机可以用多进程+协程的方式去提qps，资源够也可以使用分布式，如：kafka / celery（后者感觉更重一点，虽然能帮你做很多事情）&lt;/p>
&lt;p>我踩坑设计了一个主要依靠redis做任务的分发和pull执行（主要想糙快猛地实现），现在看来效率的确是因为架构设计有问题导致整体表现不尽如人意。&lt;/p>
&lt;p>自己后来想的一个理想的架构设计：&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/Lark20190916-184509.png" alt="" />&lt;/p>
&lt;h2 id="子域名搜集">子域名搜集&lt;/h2>
&lt;p>子域名搜集是信息搜集里很关键的一步，因为它拓展了很大一部分的攻击面。下面是我对子域名搜集的实践。&lt;/p>
&lt;p>我用python实现了一个子域名搜集工具，主要用到的方法有：&lt;/p>
&lt;ol>
&lt;li>基于字典&lt;/li>
&lt;li>开源情报 和 搜索引擎&lt;/li>
&lt;li>IP反查&lt;/li>
&lt;li>TLS证书获取&lt;/li>
&lt;/ol>
&lt;p>我使用的前者，部署最方便。&lt;/p>
&lt;p>整体架构：&lt;/p>
&lt;p>&lt;img src="https://ser4wang.oss-cn-beijing.aliyuncs.com/Lark20190916-184731.png" alt="" />&lt;/p>
&lt;p>这是单机跑的非理想情况，4核8g，60%cpu，800-1500qps&lt;/p>
&lt;p>几个大小问题：&lt;/p>
&lt;ol>
&lt;li>域名泛解析&lt;/li>
&lt;li>域名去重&lt;/li>
&lt;li>比较依赖redis&lt;/li>
&lt;/ol>
&lt;p>泛解析有两种解决方式，一种是ip-domain的hash map超过了阈值，最后做清洗；另一种是查完了，就做一次 &amp;lt;随机前缀.目标域名&amp;gt;的查询，判断是否存在，这样（和清洗一个道理）。实际做下来是1方便，因为第二种方式，如果在做判断的同时，有其他做dns query的查到了结果，就会被绕过存入data。&lt;/p>
&lt;p>域名去重是因为首先引入了开源情报和搜索引擎，还有后续得到的CNAME啊，NS啊之类的，不做去重，任务队列可能就大了两三倍。我去重主要依赖redis的set，这样又回引入大key问题，解决大key，可以根据域名的级数（多少个&amp;lt;.&amp;gt;）分去重set，也可以大key分小key，因为并发，暂时没想到好的设计，优化考虑用布隆过滤器去做去重。&lt;/p>
&lt;p>依赖redis，前面有提到，后面就不赘述了。&lt;/p>
&lt;h2 id="敏感文件扫描">敏感文件扫描&lt;/h2>
&lt;p>这个我实现的很简单，主要看了github上几个老前辈的实现，总结了一下，可以这样做：&lt;/p>
&lt;ol>
&lt;li>对目标做一次全站链接爬取（需要考虑url去重）&lt;/li>
&lt;li>根据links生成一级级目录&lt;/li>
&lt;li>配合对应字典，做验证。&lt;/li>
&lt;/ol>
&lt;p>其实有了目录+对应漏洞的字典，主要就是验证了。这块同时可以验证的漏洞有很多，除了敏感文件泄漏，还有目录遍历，未授权访问等等。后者可以通过打分策略来做（实现比较low，也可以用图像识别，ML做）。&lt;/p>
&lt;h2 id="漏洞验证">漏洞验证&lt;/h2>
&lt;p>可以找一个社区比较大的（poc贡献多），因为一个是自己写poc需要很多时间。&lt;/p></description></item><item><title>旧文章已封存，重新出发</title><link>https://selfsolo.com/p/%E6%97%A7%E6%96%87%E7%AB%A0%E5%B7%B2%E5%B0%81%E5%AD%98%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/</link><pubDate>Sun, 01 Sep 2019 16:40:17 +0800</pubDate><guid>https://selfsolo.com/p/%E6%97%A7%E6%96%87%E7%AB%A0%E5%B7%B2%E5%B0%81%E5%AD%98%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/</guid><description>&lt;p>从大一时租了台腾讯云的学生机用 WordPress 搭了个站点，中间换成了hexo+next 并使用了很长时间，到目前换成了 hugo+Stack，每次折腾都是一个于我而言很重要的时间节点。&lt;/p>
&lt;p>有本书里把“心流”定义为一种将个人精神力完全投注在某种活动上的感觉。我确实地感受过很多次，写码、看书、在西门町的无人街边深深看着夕阳，妙不可言。&lt;/p>
&lt;p>工作用的IM、短视频应用、密集的feed流就很打扰，就很不美，这种从一种无序走向另一种无序的感觉让我难以忍受。毕业到工作的一年时间里因为大小周和自己的原因很少有时间去沉淀自己的想法，于是才有了这次的折腾，想让自己静下来，沉淀些什么。&lt;/p></description></item></channel></rss>